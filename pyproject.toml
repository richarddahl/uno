# SPDX-FileCopyrightText: 2024-present Richard Dahl <richard@dahl.us>
#
# SPDX-License-Identifier: MIT

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


# Basic Project Information
[project]
name = "uno"
dynamic = ["version"]
description = 'uno is not an orm'
readme = "README.md"
requires-python = ">=3.13"
license = "MIT"
keywords = []
authors = [{ name = "Richard Dahl", email = "richard@dahl.us" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "alembic>=1.13.1",
  "aiosqlite>=0.21.0",
  "babel>=2.14.0",
  "fastapi[standard]>=0.109.0",
  # Removing inject as we're implementing our own DI system
  "jinja2>=3.1.3",
  "PyJWT>=2.8.0",
  "psycopg[binary]>=3.1.18",
  "asyncpg>=0.29.0",
  "pydantic>=2.6.0",
  "pydantic-settings>=2.1.0",
  "python-multipart>=0.0.6",
  "psutil>=5.9.7",
  "pytz>=2023.3.post1",
  "uvicorn[standard]>=0.25.0",
  "sqlalchemy[asyncio]>=2.0.25",
  "aiohttp>=3.9.1",
  "croniter>=2.0.1",
  # Additional modern dependencies
  "structlog>=24.1.0", # Structured logging
  "rich>=13.6.0",      # Rich terminal output
  "httpx>=0.25.2",     # Modern HTTP client
  "redis>=5.0.1",      # Redis client for caching
  "msgspec>=0.18.4",   # Fast serialization
  "tenacity>=8.2.3",   # Retrying library
  "cachetools>=5.3.2", # Caching utilities
  "graphviz",          # Graph visualization
]

[project.urls]
Documentation = "https://github.com/richarddahl/notorm#readme"
Issues = "https://github.com/richarddahl/notorm/issues"
Source = "https://github.com/richarddahl/notorm"

[project.scripts]
ddd-lib = "src.scripts.ddd_lib:main"

[tool.hatch.version]
path = "src/uno/__about__.py"

#GRAPHIZ 
# Basic usage - generates a PNG file named context_map.png
#python src/scripts/visualize_contexts.py
# Generate and view the context map in your browser
#python src/scripts/visualize_contexts.py --view
# Generate in SVG format
#python src/scripts/visualize_contexts.py --format svg
# Analyze dependencies between contexts
#python src/scripts/visualize_contexts.py --analyze
# Custom output path
#python src/scripts/visualize_contexts.py --output docs/architecture/context_map

# Default Environment
[tool.hatch.envs.default.scripts]
main = "uvicorn main:app {args: --reload}"
createdb = "python src/scripts/createdb.py"
dropdb = "python src/scripts/dropdb.py"
createsuperuser = "python src/scripts/createsuperuser.py"
createquerypaths = "python src/scripts/createquerypaths.py"
vector-demo = "python src/scripts/vector_demo.py {args}"
migrate-init = "python src/scripts/migrations.py init"
migrate-generate = "python src/scripts/migrations.py generate {args}"
migrate-up = "python src/scripts/migrations.py upgrade {args:head}"
migrate-down = "python src/scripts/migrations.py downgrade {args}"
migrate-current = "python src/scripts/migrations.py current"
migrate-history = "python src/scripts/migrations.py history"
migrate-revisions = "python src/scripts/migrations.py revisions"


#Development Environment
[tool.hatch.envs.dev.scripts]
main = "ENV=dev uvicorn main:app {args: --reload}"
createdb = "ENV=dev python src/scripts/createdb.py"
dropdb = "ENV=dev python src/scripts/dropdb.py"
createsuperuser = "ENV=dev python src/scripts/createsuperuser.py"
createquerypaths = "ENV=dev python src/scripts/createquerypaths.py"
vector-demo = "ENV=dev python src/scripts/vector_demo.py {args}"
migrate-init = "ENV=dev python src/scripts/migrations.py init"
migrate-generate = "ENV=dev python src/scripts/migrations.py generate {args}"
migrate-up = "ENV=dev python src/scripts/migrations.py upgrade {args:head}"
migrate-down = "ENV=dev python src/scripts/migrations.py downgrade {args}"
migrate-current = "ENV=dev python src/scripts/migrations.py current"
migrate-history = "ENV=dev python src/scripts/migrations.py history"
migrate-revisions = "ENV=dev python src/scripts/migrations.py revisions"
pg-extensions = "python -m src.scripts.postgres_extensions {args}"
docker-setup = "python -m src.scripts.setup_environment --env dev"
docker-rebuild = "python -m src.scripts.docker_rebuild --env dev"
app = ["ENV=dev", "docker-setup", "main"]
vector-demo-setup = ["ENV=dev", "docker-setup", "vector-demo setup"]


# Testing Environment
[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]",
  "pytest",
  "pytest-asyncio>=0.21.1",
  "pytest-benchmark>=4.0.0",
  "asyncio",
  "httpx",
  "requests",
  "factory_boy",
  "pytest-mock",
  "hypothesis",
  "bandit",
]

[tool.coverage.run]
source_pkgs = ["uno", "tests"]
branch = true
parallel = true
omit = ["src/uno/__about__.py"]

[tool.coverage.paths]
uno = ["src/uno", "*/uno/src/uno"]
tests = ["tests", "*/uno/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.hatch.envs.test.scripts]
test = "ENV=test pytest --tb=no --capture=tee-sys --show-capture=all {args}"
testv = "ENV=test pytest --tb=short --capture=tee-sys --show-capture=all {args}"
testvv = "ENV=test pytest -vv --capture=tee-sys --show-capture=all {args}"
testV = "ENV=test pytest --capture=tee-sys --show-capture=all {args}"
test-examples = "ENV=test PYTHONPATH=src pytest examples/app/tests/ --tb=no --capture=tee-sys --show-capture=all"
test-examplesV = "ENV=test PYTHONPATH=src pytest examples/app/tests/ --capture=tee-sys --show-capture=all"
test-cov = "ENV=test coverage run -m pytest"
cov-report = ["ENV=test", "- coverage combine", "coverage report"]
cov = ["ENV=test", "test-cov", "cov-report"]
benchmark = "ENV=test pytest tests/benchmarks/ {args}"
pg-extensions = "python -m src.scripts.postgres_extensions {args}"
createdb = "ENV=test python src/scripts/createdb.py"
dropdb = "ENV=test python src/scripts/dropdb.py"
migrate-init = "ENV=test python src/scripts/migrations.py init"
migrate-generate = "ENV=test python src/scripts/migrations.py generate {args}"
migrate-up = "ENV=test python src/scripts/migrations.py upgrade {args:head}"
migrate-down = "ENV=test python src/scripts/migrations.py downgrade {args}"
migrate-current = "ENV=test python src/scripts/migrations.py current"
migrate-history = "ENV=test python src/scripts/migrations.py history"
migrate-revisions = "ENV=test python src/scripts/migrations.py revisions"
docker-setup = "python -m src.scripts.setup_environment --env test"
docker-rebuild = "python -m src.scripts.docker_rebuild --env test"
all = ["ENV=test", "docker-setup", "test"]

[tool.pytest.ini_options]
markers = [
  "asyncio: mark a test as an asyncio test (using pytest-asyncio)",
  "benchmark: mark test as a performance benchmark",
  "pgvector: mark test as requiring pgvector extension",
]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
pythonpath = ["."]


# Documentation Environement
[tool.hatch.envs.docs]
dependencies = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings>=0.15.0",
  "mkdocs-autorefs",
  "mkdocs-material-extensions",
  "mkdocstrings-python",
  "mkdocs-git-revision-date-localized-plugin",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8001"

# Lint Environment
[tool.hatch.envs.lint]
dependencies = ["ruff", "mypy>=1.8.0"]

[tool.hatch.envs.lint.scripts]
lint = "ruff check src/uno tests"
typecheck = "mypy --install-types --non-interactive src/uno tests"
all = ["lint", "typecheck"]

# Types Environment
[tool.hatch.envs.types]
extra-dependencies = ["mypy>=1.8.0", "ruff"]

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/uno tests}"
lint = "ruff check {args:src/uno tests}"
format = "ruff format {args:src/uno tests}"
all = ["check", "lint", "format"]

# MyPy Configuration - merged from mypy.ini
[tool.mypy]
# Core settings
python_version = "3.13"
# Use the official SQLAlchemy mypy plugin for modern SQLAlchemy type checking
plugins = ["sqlalchemy.ext.mypy.plugin"]
namespace_packages = true
explicit_package_bases = true
mypy_path = "src"
exclude = "(?x)(migrations|migrations/versions)"

# Warning settings
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
warn_no_return = true
warn_unused_configs = true
# Strictness settings
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true

# Module-specific overrides
[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true

# Ruff lint config migrated to new structure as of 2025-04-24
[tool.ruff]
line-length = 88
[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "I",   # isort
  "N",   # naming
  "UP",  # pyupgrade (modernize syntax)
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
  "TCH", # typecheck
  "RUF", # Ruff-specific rules
  "ERA", # eradicate
  "PL",  # pylint
  "S",   # security (bandit)
  "DTZ", # datetime-related checks
  "PT",  # pytest-specific checks
]
ignore = [
  "E501", # Line too long (handled by formatter)
]
exclude = [
  ".git",
  ".ruff_cache",
  ".mypy_cache",
  ".pytest_cache",
  "__pycache__",
  "migrations",
]

[tool.ruff.lint.isort]
known-first-party = ["uno"]
combine-as-imports = true
force-single-line = false
known-third-party = ["fastapi", "pydantic", "sqlalchemy"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  "S101", # Use of assert
]

# Optional formatter config if you're using Ruff as a formatter
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# PyPy Configuration
[tool.pypy]
# Specify PyPy interpreter paths
python_version = "3.13" # PyPy version to target

# JIT settings
jit = true             # Enable JIT (Just-In-Time) compilation
jit_threshold = 1000   # Execute a loop this many times before compiling it
jit_trace_limit = 6000 # Maximum length of a trace

# Memory settings
gc_nursery_size = "4M" # Size of the young object nursery
gc_min_threshold = 700 # Minimum threshold size for the garbage collector
gc_increment_step = 3  # Increment step for the garbage collector
gc_heap_size = "1G"    # Maximum heap size

# Debug options
debug = false                # Enable PyPy debugging options
debug_print_bytecode = false # Print bytecode instructions during execution

# Performance tuning
optimize = 2         # Optimization level (0-2)
shared_memory = true # Whether to use shared memory for JIT code
portable = false     # Generate portable JIT code (less optimized)

cpyext = true # Enable CPython C API compatibility layer
# Benchmarking configuration
[tool.pypy.benchmark]
compare_with_cpython = true # Compare performance with CPython
iterations = 10             # Number of benchmark iterations
warmup = 3                  # Number of warmup iterations
