import pytest
from typing import TYPE_CHECKING
from uno.di.protocols import ContainerProtocol, ScopeProtocol

class ImplementsContainerProtocol:
    async def register_singleton(self, interface, implementation, replace=False): ...
    async def register_scoped(self, interface, implementation, replace=False): ...
    async def register_transient(self, interface, implementation, replace=False): ...
    async def resolve(self, interface): ...
    def create_scope(self): ...
    async def dispose(self): ...
    async def __getitem__(self, key): ...
    async def __setitem__(self, key, value): ...

class ImplementsScopeProtocol:
    @property
    def id(self): return "id"
    @property
    def parent(self): return None
    async def resolve(self, interface): ...
    async def __getitem__(self, key): ...
    async def __setitem__(self, key, value): ...
    async def dispose(self): ...
    def create_scope(self): ...
    def get_service_keys(self): return []
    async def get_service_keys(self): return []


def test_container_protocol_structural():
    impl = ImplementsContainerProtocol()
    assert isinstance(impl, ContainerProtocol)

def test_scope_protocol_structural():
    impl = ImplementsScopeProtocol()
    assert isinstance(impl, ScopeProtocol)


def test_protocols_imported_in_type_checking():
    # This is a static check: ensure protocols are imported in TYPE_CHECKING blocks if runtime-only
    # This test is a placeholder for code review/static linting
    assert TYPE_CHECKING is False
