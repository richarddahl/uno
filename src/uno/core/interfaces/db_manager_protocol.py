"""
DBManagerProtocol: Protocol for database manager services (sync).
"""
from typing import Protocol, Any

class DBManagerProtocol(Protocol):
    def execute_ddl(self, ddl: str) -> None:
        ...
    def execute_script(self, script: str) -> None:
        ...
    def execute_from_emitter(self, emitter: Any) -> None:
        ...
    def execute_from_emitters(self, emitters: list[Any]) -> None:
        ...
    def create_schema(self, schema_name: str) -> None:
        ...
    def drop_schema(self, schema_name: str, cascade: bool = False) -> None:
        ...
    def create_extension(self, extension_name: str, schema: str | None = None) -> None:
        ...
    def table_exists(self, table_name: str, schema: str | None = None) -> bool:
        ...
    def function_exists(self, function_name: str, schema: str | None = None) -> bool:
        ...
    def type_exists(self, type_name: str, schema: str | None = None) -> bool:
        ...
    def trigger_exists(self, trigger_name: str, table_name: str, schema: str | None = None) -> bool:
        ...
    def policy_exists(self, policy_name: str, table_name: str, schema: str | None = None) -> bool:
        ...
